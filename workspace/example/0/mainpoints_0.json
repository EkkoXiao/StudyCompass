{
    "id": 0,
    "keyword": "语义计算",
    "mainpoints": [
        {
            "id": 0,
            "name": "语法制导的语义计算基础",
            "pages": [
                1,
                4
            ],
            "subpoints": [
                {
                    "id": 0,
                    "pages": [
                        1,
                        1
                    ],
                    "name": "课程标题",
                    "definition": "第六讲",
                    "information": "这是课程内容的开始，标明了本讲的主题。",
                    "usage": "用于提示本讲的内容和学习目标。",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://zhangt.top/CS/FSPL-Study-Notes/",
                            "description": "Dec 29, 2021 — 这节课讲的是命令式程序的公理语义axiomatic semantics。 hoare logic 的研究至今都很活跃，比如： separation logic (reasoning about pointers) ..."
                        },
                        {
                            "rank": 1,
                            "url": "https://blog.csdn.net/judyge/article/details/41096437",
                            "description": "Nov 14, 2014 — 前言： YACC （Yet Another Compiler Compiler） 是1974年在 Unix 下设计出来的一种优秀的计算机语法分析工具。LEX 是相应的词法分析工具。"
                        },
                        {
                            "rank": 2,
                            "url": "https://arxivdaily.com/thread/50666",
                            "description": "6 days ago — 为了克服这个问题，我们提出了辛辣随制导（SAG），它在两个内部阶段计算梯度制导。 ... 标题： 基础模型推理综述 作者：Jiankai Sun,Chuanyang Zheng,Enze ..."
                        }
                    ],
                    "knowledgeDensity": 1.2776527200489838,
                    "weight": 0.2944444444444444
                },
                {
                    "id": 1,
                    "pages": [
                        2,
                        3
                    ],
                    "name": "语法制导的语义计算基础介绍",
                    "definition": "介绍了语法制导的语义计算的基本概念和应用场景。",
                    "information": "本部分首先提出了语法制导的语义计算的概念，然后解释了它基于上下文无关文法的基础上，用于静态语义检查、中间代码甚至目标代码的生成等编译过程。还介绍了属性文法和翻译模式这两种用于定义语义计算规则和计算过程的方法。",
                    "usage": "用于向学生说明语法制导的语义计算在编译原理中的重要性和基本应用。",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://dokumen.tips/documents/cecoe-ecea-chengli7coursescompiler18notes.html",
                            "description": "... 语法分析树，并利用与产生式（语法规则）相关联的语义规则来计算分析树中各结点对应的语义属性值. Page 10: 《编译原理与技术》 语法制导翻译Ⅰ - USTCstaff."
                        },
                        {
                            "rank": 1,
                            "url": "https://zhangt.top/CS/FSPL-Study-Notes/",
                            "description": "Dec 29, 2021 — ... 计算上是一样的。而且它们可以相互转换; curry: λ(x, y). x-y (不合法) 转 ... 这条规则不是语法制导的，没法通过c 来确定什么时候用这条规则，需要根据 ..."
                        },
                        {
                            "rank": 2,
                            "url": "https://hejueyun.github.io/posts/634d3f5d/",
                            "description": "Sep 4, 2021 — 计算机数理逻辑-时序逻辑-语法与语义. 2022-02-24. #sec. 计算机数理逻辑-程序 ... 编译原理备忘录-语法制导. 2019-12-05. #Notes. 操作系统备忘录--处理机."
                        },
                        {
                            "rank": 3,
                            "url": "https://blog.csdn.net/judyge/article/details/41096437",
                            "description": "Nov 14, 2014 — 基于yacc实现的语法分析和语义分析 · 本资源来源于北邮编译原理作业，代码中 ... 语法制导翻译,布置PP3 语法制导翻译运行时存储... c实现的编译原理词法 ..."
                        },
                        {
                            "rank": 4,
                            "url": "https://notes.cqqqwq.com/cs/db/mysql_install/",
                            "description": "Mar 29, 2022 — 数学基础 · 物理基础 · 实用工具 · logo Minimal Stack. ChenQiqian/learn-notes ... 语法制导的语义翻译 · 中间代码生成及优化. 软件分析与验证 软件分析与 ..."
                        }
                    ],
                    "knowledgeDensity": 1.332510800677082,
                    "weight": 0.5256410256410255
                },
                {
                    "id": 2,
                    "pages": [
                        4,
                        4
                    ],
                    "name": "属性文法示例",
                    "definition": "通过一个具体的例子来说明属性文法的概念和实现。",
                    "information": "本部分通过一个识别语言 L = { anbncn | n ≥ 1 } 的产生式和相应的语义动作/限制条件，来展示如何使用属性文法来进行语义计算。",
                    "usage": "用于向学生展示属性文法在具体语言处理中的应用，帮助学生理解属性文法的工作机制。",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://blog.csdn.net/judyge/article/details/41096437",
                            "description": "YACC (Yet Another Compiler Compiler) is a superior computer syntax analysis tool designed in 1974 under Unix. LEX is the corresponding lexical analysis tool."
                        },
                        {
                            "rank": 1,
                            "url": "http://www.c-s-a.org.cn/csaen/article/issue/2009_18_4",
                            "description": "Discusses syntax-driven lexical analysis and semantic action strategies, and based on the idea of grammar guidance, constructs a JavaScript abstract syntax tree with attribute grammar."
                        }
                    ],
                    "knowledgeDensity": 1.3395922837623075,
                    "weight": 0.5641025641025641
                }
            ],
            "knowledgeDensity": 3.9497558044883734
        },
        {
            "id": 1,
            "name": "属性文法和翻译模式的语义计算规则及计算过程定义",
            "pages": [
                5,
                11
            ],
            "subpoints": [
                {
                    "id": 0,
                    "pages": [
                        5,
                        7
                    ],
                    "name": "属性文法的语义动作计算",
                    "definition": "通过给定的产生式及其对应的语义动作规则，展示如何对特定语言进行语义计算",
                    "information": "本部分通过例子展示了如何利用属性文法的产生式以及与之相关联的语义动作来识别特定的语言L = { aibjck | i, j, k ≥ 1}，并且针对 anbncn (n ≥ 1) 这种特定形式的字符串进行合法性判断。具体的语义动作包括了对属性num的计算以及在满足特定条件时输出“Accepted!”或“Refused!”的动作。",
                    "usage": "用于识别和校验给定语言的字符串，并进行相应的语义处理",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://dokumen.tips/documents/chapter-syntax-directed-translation-51-attributes-and-attribute-grammars-52.html",
                            "description": "... 定义属性定义 保证语义动作不会引用还没有计算的属性值。保证语义动作不会引用还没有计算的属性值。 例：语法和语义规则如下，请写出其翻译模式： TT1*F Tval:=T1 val*F ..."
                        },
                        {
                            "rank": 1,
                            "url": "https://blog.csdn.net/judyge/article/details/41096437",
                            "description": "Nov 14, 2014 — 前言：. YACC （Yet Another Compiler Compiler） 是1974年在 Unix 下设计出来的一个优秀的计算机语法分析工具。LEX 是相应的词法分析工具。"
                        },
                        {
                            "rank": 2,
                            "url": "https://patents.google.com/patent/TW201835786A/en",
                            "description": "... 文法施加規則，例如形態學、語意學及語法學。Language is a thing, more ... 及屬性的有效結構可接著被表示為命名空間的物。XSD references allow extraction of XSD ..."
                        },
                        {
                            "rank": 3,
                            "url": "https://git.rrricardo.top/jackfiled/Wiki/commit/7e37ce2244be1deb727fb7d9e9032cd507ed75a9",
                            "description": "- 为每个语义规则编写一段代码计算属性值. - 对于每个产生式$Z \\to XYZ$:. 在进行归 ... 在自底向上的分析过程实现L属性定义的翻译。 - 可以实现任何基于LL(1)文法的L属性 ..."
                        },
                        {
                            "rank": 4,
                            "url": "http://www.wenqujingdian.com/Public/editor/attached/file/20180612/20180612175640_68532.pdf",
                            "description": "Jun 12, 2018 — 3.4 名转动词属性、特征及分布的认知—功能模式阐释...... 104. 第四章 ... 司显柱，论英语形转名词的语义特征及修辞效果。《山东外语教学》，. 1995（4 ...\n331 pages"
                        }
                    ],
                    "knowledgeDensity": 1.3741957945961423,
                    "weight": 0.5897435897435896
                },
                {
                    "id": 1,
                    "pages": [
                        8,
                        9
                    ],
                    "name": "属性文法的基本概念",
                    "definition": "属性文法是在上下文无关文法的基础上，为文法符号关联属性，为产生式关联语义规则集合的一种文法扩展",
                    "information": "本部分介绍了属性文法的概念，它在上下文无关文法的基础上进行扩展，通过关联每个文法符号的多个属性和每个产生式的一组语义规则或称为语义动作，来详细描述符号的特性（如值、类型、名字串等）和产生式的语义计算过程。本课程不讨论含限定条件的属性文法。",
                    "usage": "用于对文法符号进行更详细的描述，以及定义产生式的语义计算如何进行",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://rfc2cn.com/rfc6110.html",
                            "description": "解决语法规则、语义约束和其他数据建模方面的模式语言，但更重要的是，它们以协调一致的方式进行。虽然，一些DSDL部分尚未标准化，仍在进行中，但YANG-to-DSDL映射所..."
                        },
                        {
                            "rank": 1,
                            "url": "https://academic-accelerator.com/encyclopedia/zh-cn/temporal-logic",
                            "description": "等）是一个规则和符号系统，用于表示和推理，直到你吃东西））。时序逻辑由Arthur Prior 在20 世纪50 年代末提出，有时被称为基于模态逻辑的时序逻辑系统，其中Hans Kampf..."
                        },
                        {
                            "rank": 2,
                            "url": "https://academic-accelerator.com/encyclopedia/zh-cn/data-model",
                            "description": "特殊兴趣领域的概念及其关系。在 1970 年代，G.M. Nijssen 开发了“自然语言信息...必须满足要求的重要数据属性包括：定义相关的属性关联性：数据在业务环境中的有用..."
                        },
                        {
                            "rank": 3,
                            "url": "https://blog.csdn.net/judyge/article/details/41096437",
                            "description": "前言：. YACC （Yet Another Compiler Compiler） 是1974年在 Unix 下设计出来的一个优秀的计算机语法分析工具。LEX 是相应的词法分析工具。"
                        },
                        {
                            "rank": 4,
                            "url": "https://www.cnblogs.com/rossiXYZ/my-article/12770436.html",
                            "description": "Apr 25, 2020 — RelTrait : 用来定义逻辑表的物理相关属性（physical property），三种主要... 即：语义分析，根据SqlNode及元信息构建RelNode 树，也就是最初版本的..."
                        }
                    ],
                    "knowledgeDensity": 1.3340390178270682,
                    "weight": 0.5384615384615384
                },
                {
                    "id": 2,
                    "pages": [
                        10,
                        11
                    ],
                    "name": "属性的分类及语义规则",
                    "definition": "属性分为综合属性和继承属性，语义规则用于描述如何计算属性值或执行附加的语义动作",
                    "information": "本部分进一步详细介绍了属性的两种类型：综合属性用于自下而上的信息传递，继承属性用于自上而下的信息传递。同时，对于语义规则的形式和使用进行了说明，包括复写规则和基于语义函数的规则。这些规则决定了如何根据属性值计算新的属性值或执行相关的语义动作。",
                    "usage": "用于定义属性的计算方式和传递方向，以及在语法分析过程中执行的语义动作",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://rfc2cn.com/rfc6110.html",
                            "description": "解决语法规则、语义约束和其他数据建模方面的模式语言，但更重要的是，它们以协调一致的方式进行。诚然，一些DSDL部分尚未标准化，仍在进行中，但YANG-to-DSDL映射所..."
                        },
                        {
                            "rank": 1,
                            "url": "https://whatwg-cn.github.io/html/",
                            "description": "May 21, 2022 — 本标准定义了最新的HTML 语法，简单地称为\"HTML\"。 第二个具体的语法是XML ... 安全 插件应该遵循 sandbox 属性的语义。 例如，在沙箱 iframe 中初始化..."
                        },
                        {
                            "rank": 2,
                            "url": "https://ecma262.docschina.org/",
                            "description": "... 规则检测到。 5.1.5 语法标记法。 不管是在语法的产生式，还是在本规范中，词法语法，正则语法以及数字字面串语法的终结符都用等宽字体展示。这些将以的脚本形式出现..."
                        },
                        {
                            "rank": 3,
                            "url": "https://dokumen.tips/documents/chapter-syntax-directed-translation-51-attributes-and-attribute-grammars-52.html",
                            "description": "翻译模式给出了使用语义规则进行计算的顺序。可看成翻译模式给出了使用语义规则 ... 条件：语法制导定义是条件：语法制导定义是 L-L- 属性定义属性定义 保证语义动作不会引用..."
                        },
                        {
                            "rank": 4,
                            "url": "https://academic-accelerator.com/encyclopedia/zh-cn/data-model",
                            "description": "... 模式和查询语言中得到直接支持。 建模对象和角色 一种定义为“无属性”和“基于事实”的数据建模方法。结果是一个可验证的正确系统，从中可以派生出其他常见的工件，例如..."
                        }
                    ],
                    "knowledgeDensity": 1.8561808603736714,
                    "weight": 0.641025641025641
                }
            ],
            "knowledgeDensity": 8.514171477285256
        },
        {
            "id": 2,
            "name": "属性文法举例与基于属性文法的语义计算",
            "pages": [
                12,
                20
            ],
            "subpoints": [
                {
                    "id": 0,
                    "pages": [
                        12,
                        13
                    ],
                    "name": "属性文法基础和综合属性示例",
                    "definition": "属性文法是一种用于描述语言语法及其语义的形式工具，通过属性和语义规则来关联语法结构中的各个元素。",
                    "information": "本部分内容首先定义了属性文法的基本概念，随后以只包含综合属性的例子（起始符号S）来展示如何通过产生式和语义动作来计算属性值，最后通过对表达式3*(5+4)的分析树进行后序遍历执行相应的语义规则，得到表达式的计算过程。",
                    "usage": "属性文法的综合属性代表自下而上传递的信息，常用于构建语义分析中的语法制导翻译。",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://www.cglhub.com/auto/db/detail.aspx?db=950008&rid=1263779&agfi=0&cls=0&uni=True&cid=0&showgp=True&prec=False&md=93&pd=6&msd=93&psd=6&mdd=93&pdd=6&count=10&reds=%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%BB%BA%E6%A8%A1",
                            "description": "第四,由于SD的语法采用图形符号表示,语义采用自然语言描述,缺乏形式化的精确语义,难以直接支持形式化分析与验证。而PA基于严格的数学基础,其语法和语义采用形式化符号..."
                        },
                        {
                            "rank": 1,
                            "url": "https://arxivdaily.com/thread/50665",
                            "description": "6 days ago — 具体地说，我们构造了一个共指图的基础上的共指语义关系，介绍了图的结构信息。... 属性，并依赖于沉重的计算资源。本文提出了一种基于神经元索引动态LoRA..."
                        },
                        {
                            "rank": 2,
                            "url": "https://github.com/WilsonQ1n/VIM_C_IDE?search=1",
                            "description": "将vim配置成C语言开发的IDE. Contribute to WilsonQ1n/VIM_C_IDE development by creating an account on GitHub."
                        },
                        {
                            "rank": 3,
                            "url": "https://academic-accelerator.com/encyclopedia/zh-cn/speech-production",
                            "description": "语音生成是将思想转化为声音的过程。这包括单词选择、相关语法形式的组织以及通过使用发声的运动系统发出的声音的发音。语音生成可以是自发的，例如当一个人形成对话的..."
                        },
                        {
                            "rank": 4,
                            "url": "https://lzlib.cglhub.com/auto/db/detail.aspx?db=950008&rid=1362450&agfi=0&cls=0&uni=True&cid=0&showgp=False&prec=False&md=265&pd=3&msd=265&psd=3&mdd=265&pdd=3&count=10&reds=rah",
                            "description": "该层级分类方法能够充分利用语料库提供的知识,很好地平衡过分类和欠分类之间的矛盾。本文还针对结构语法分析的分类歧义提出了一种基于短语实例聚类的分类歧义消解方法和一..."
                        }
                    ],
                    "knowledgeDensity": 2.3903567425627115,
                    "weight": 1.0
                },
                {
                    "id": 1,
                    "pages": [
                        14,
                        15
                    ],
                    "name": "继承属性示例",
                    "definition": "继承属性是属性文法中的一种属性，其信息流向是自上而下的。",
                    "information": "这一部分通过含有继承属性的示例来说明如何在分析树中自上而下执行语义规则，其中A.num、B.num和C.num为综合属性，B.in_num和C.in_num为继承属性。通过对输入串aabbcc的分析树进行遍历，同时执行综合属性和继承属性对应的语义动作，最终得到所有属性值的计算过程。",
                    "usage": "继承属性的使用可以方便地处理自上而下的信息传递，适用于需要从父节点向子节点传递上下文信息的场景。",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://github.com/Jiang-Xuan/blog/issues/5",
                            "description": "Jan 12, 2020 — 通常, 继承的属性分配给principal box, 然后通过box 树继承到同一element 生成的其他任何Box. 非继承属性默认赋给principal box, 但是当element 生成..."
                        },
                        {
                            "rank": 1,
                            "url": "https://github.com/dolymood/front-end-face-questions?search=1",
                            "description": "哪些属性可以继承？优先级算法如何计算？CSS3新增伪类有那些？ * 1.id选择器（ #myid） 2.类选择器（.myclassname） 3.标签选择器（div, h1, p） 4.相邻选择器（h1 +..."
                        },
                        {
                            "rank": 2,
                            "url": "https://paper.seebug.org/3029/",
                            "description": "Sep 11, 2023 — Ignition在构造抽象语法树AST时，JavaScript变量（包括全局属性）的每个引用（即标识符）都由VariableProxy节点表示。 在AST构造之后和变量分配之前，大..."
                        },
                        {
                            "rank": 3,
                            "url": "https://docs.jboss.org/hibernate/core/3.3/reference/zh-CN/html_single/",
                            "description": "Jun 24, 2009 — 大多数类有一个JavaBeans风格的属性， 为每一个实例包含唯一的标识。 <id> 元素定义了该属性到数据库表主键字段的映射。 <id name=\"propertyName\" ..."
                        },
                        {
                            "rank": 4,
                            "url": "https://help.adobe.com/zh_CN/FlashPlatform/reference/actionscript/3/mx/controls/AdvancedDataGridBaseEx.html",
                            "description": "[覆盖] 表示DisplayObject 实例相对于3D 父容器沿z 轴的z 坐标位置。 UIComponent. 受保护的属性. 隐藏继承的受保护属性. 显示继承的受保护属性. 属性, 由以下参数定义."
                        }
                    ],
                    "knowledgeDensity": 1.3744936490215434,
                    "weight": 0.6025641025641025
                },
                {
                    "id": 2,
                    "pages": [
                        16,
                        17
                    ],
                    "name": "基于属性文法的语义计算方法",
                    "definition": "基于属性文法的语义计算是指通过属性文法来计算语法结构相应的语义信息。",
                    "information": "此部分先提出了语义计算方法的两个分类：树遍历方法和单遍的方法。树遍历方法通过遍历分析树进行属性计算；单遍的方法则是在语法分析遍历的同时进行属性计算。接着，详细介绍了树遍历方法中构造输入串的分析树和依赖图、进行拓扑排序以计算所有属性的步骤，并说明了如果依赖图中存在环，则对应的属性文法不是良定义的。",
                    "usage": "这一计算方法在编译原理中的语义分析阶段非常重要，它确保了语义规则能够正确、系统地应用于语法分析树，以计算出正确的属性值。",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://blog.csdn.net/m0_53295129/article/details/126612545",
                            "description": "Aug 30, 2022 — 用Javacc实现MiniC的词法分析、语法分析、语义分析。在词法分析部分根据单词的构词规则分类，输出二元式；在语法分析部分利用Javacc实现LL(1)文法，判断源 ..."
                        },
                        {
                            "rank": 1,
                            "url": "https://www.researchgate.net/figure/A-simplified-example-of-tree-matching_fig9_252814554",
                            "description": "在属性文法的基础上，定义GDM的查询规则，并给出了包括选择、投影、笛卡尔乘积 ... 第二，在基于文法的数据模型的基础上，将Web网页形式化为GDM的数据实例，将Web网页的 ..."
                        },
                        {
                            "rank": 2,
                            "url": "https://github.com/bitzhuwei/LALR1Compiler",
                            "description": "下面是一个文法的例子：. 1 // 虎书中的文法3-10 2 <S> ::= <V> \"=\" <E> ; 3 <S> ::= <E> ; 4 <E> ... 语法分析、语义分析结束后再继续。C#的 yield return 语法糖真是甜 ..."
                        },
                        {
                            "rank": 3,
                            "url": "https://patents.google.com/patent/US8949170B2/en%3Fq%3DG05B13%252f0275%26num%3D100",
                            "description": "... 属性特征语义的方法及装置. CN106909896B * 2017-02-17 2020-06-30 竹间智能科技 ... 基于深度学习的语义相似度计算方法. US10936349B2 2019-07-24 2021-03-02 Bank Of ..."
                        },
                        {
                            "rank": 4,
                            "url": "https://experienceleague.adobe.com/docs/experience-cloud-kcs/kbarticles/KA-20258.html?lang=zh-Hans",
                            "description": "Oct 17, 2022 — 如果您以前有一个实例使用数据存储，但该实例已销毁，并且创建了一个新实例以使用数据存储，则可能会出现此问题。 在删除在数据存储中注册的存储库ID后， ..."
                        }
                    ],
                    "knowledgeDensity": 1.8537184009619843,
                    "weight": 0.6282051282051282
                },
                {
                    "id": 3,
                    "pages": [
                        18,
                        19
                    ],
                    "name": "依赖图的构建",
                    "definition": "依赖图是一个有向图，用来描述分析树中属性之间的相互依赖关系。",
                    "information": "在这一部分中，详细描述了依赖图的概念和构建依赖图的算法过程。通过遍历分析树中的每一个结点，对于每个结点使用的产生式的每一个语义规则中涉及的每一个属性，在依赖图中建立结点；对于形如f(c1,c2,…ck)的语义规则，在依赖图中也建立一个虚结点，并从ci结点到b结点构造有向边，从而表示属性之间的依赖关系。",
                    "usage": "依赖图的构建在进行属性值计算之前是一个必要步骤，它能够指导我们如何顺序地计算属性值，以及如何检测和处理潜在的属性计算中的循环依赖问题。",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://github.com/agilexrobotics/limo-doc?search=1",
                            "description": "下图为构建地图过程中，rviz图形化显示的栅格地图和激光数据。4.4.3 Qt工具箱。计算图可视化工具(rqt_graph). rqt_graph工具可以图形化显示当前ROS系统中的计算图。在..."
                        },
                        {
                            "rank": 1,
                            "url": "https://rfc2cn.com/rfc8345.html",
                            "description": "本文档定义了网络/服务拓扑和清单的抽象（通用或基本）数据模型。该数据模型作为基础模型，在其他更具体的拓扑和库存数据模型中添加了特定于技术的详细信息。"
                        },
                        {
                            "rank": 2,
                            "url": "https://rfc2cn.com/rfc7468.html",
                            "description": "构建依赖规范表示或对特定数据对象进行指纹识别的实现的实现者需要理解，本文档没有定义规范编码。第一个歧义是通过允许文本编码表示而不是二进制BER或DER编码引入的..."
                        },
                        {
                            "rank": 3,
                            "url": "https://seata.io/zh-cn/docs/next/download/",
                            "description": "optimize：[#1701] 移除无用的imports. [#1705] 优化了一些基于java5 的语法结构 ... [#1297] 兼容seata-spring独立依赖用法，对seata-spring添加了seata-codec-all依赖..."
                        },
                        {
                            "rank": 4,
                            "url": "https://academic-accelerator.com/Manuscript-Generator/zhcn/Semantic-Information",
                            "description": "这是使用经过训练的算法实现的，该算法提供基于卷积神经网络(CNN) 的智能决策策略，以自动从电子病历中提取高级语义信息，然后执行自动诊断。"
                        }
                    ],
                    "knowledgeDensity": 1.8865070000707185,
                    "weight": 0.6666666666666666
                },
                {
                    "id": 4,
                    "pages": [
                        20,
                        20
                    ],
                    "name": "树遍历计算方法示例",
                    "definition": "树遍历计算方法是基于属性文法的语义计算方法中的一种，通过遍历分析树来计算属性值。",
                    "information": "本部分通过对输入串10.01进行语义计算的示例，展示了如何使用树遍历计算方法来求解属性值。通过定义语义动作和产生式，揭示了在分析树中计算属性值的过程。",
                    "usage": "此示例说明了在具体的语言处理中，如何应用树遍历计算方法来进行属性的计算，尤其是在处理类似于二进制小数转换为十进制小数这样的语义分析任务。",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://github.com/bitzhuwei/LALR1Compiler",
                            "description": "例如对上述文法的6个示例代码，LALR(1)Compiler可以分别dump出如下的语法树 ... 现在语法树已经有了，剩下的就是遍历此树的事了。不再详述。故事. 故事，其实是 ..."
                        },
                        {
                            "rank": 1,
                            "url": "https://cloud.tencent.com/developer/article/2094750?areaSource=106005.16",
                            "description": "DOM方式根据XML的层级结构在内存中分配一个树形结构,把XML的标签,属性和文本等元素都封装成树的节点对象. 优点: 便于实现 增 删 改 查; 缺点: XML文件过大可能造成内存 ..."
                        },
                        {
                            "rank": 2,
                            "url": "https://blog.csdn.net/weixin_36840127/article/details/130006280",
                            "description": "Apr 7, 2023 — //15.1 命令式I/O的问题示例. //示例15.1： 用命令式风格计算行数. def linesGt40k(filename:String):IO[Boolean] = IO {. val src = io.Source.fromFile ..."
                        },
                        {
                            "rank": 3,
                            "url": "https://www.cnblogs.com/LittleHann/p/4433278.html",
                            "description": "Apr 21, 2015 — 基于样本之间的距离的聚类方法只能发现球状的簇，而基于密度的方法可用来 ... 计算是基于人类经验对待检测样本的数值化。特征工程是个反复循环的过程 ..."
                        },
                        {
                            "rank": 4,
                            "url": "https://cloud.tencent.com/developer/article/1693296",
                            "description": "Sep 7, 2020 — 本文将简述Flink SQL / Table API的内部实现，为大家把\"从SQL语句到具体执行\" 这个流程串起来。并且尽量多提供调用栈，这样大家在遇到问题时就知道 ..."
                        }
                    ],
                    "knowledgeDensity": 1.2496623420090232,
                    "weight": 0.1
                }
            ],
            "knowledgeDensity": 17.26890961191124
        },
        {
            "id": 3,
            "name": "属性文法的概念和属性的记号",
            "pages": [
                21,
                30
            ],
            "subpoints": [
                {
                    "id": 0,
                    "pages": [
                        21,
                        24
                    ],
                    "name": "基于属性文法的语义计算示例",
                    "definition": "通过树遍历的方法举例说明了如何基于属性文法进行语义计算",
                    "information": "介绍了构造输入语句的语法分析树、为分析树中所有节点的每个属性建立依赖图并给定一个标记序号、根据语义动作建立依赖图中的有向边、通过无圈的依赖图存在拓扑排序进行属性值的计算以及计算过程中各节点对应的属性值。",
                    "usage": "用于指导如何在编译器设计中使用属性文法进行语义分析和代码生成",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://github.com/bitzhuwei/LALR1Compiler",
                            "description": "例如对上述文法的6个示例代码，LALR(1)Compiler可以分析dump出以下的语法树 ... 在GLSL文法里，是下面这些state需要进行语义分析。此时，分析器刚刚读到用户自定义的 ..."
                        },
                        {
                            "rank": 1,
                            "url": "https://blog.csdn.net/wangdeqiang2007/article/details/84954244",
                            "description": "Dec 11, 2018 — 基于lex/yacc，识别出.h文件中、所有的合法的函数定义包括三个源代码： lex.l: 词法定义; yacc.y: 语法定义; main.c/main.h: main处理程序. lex.l"
                        },
                        {
                            "rank": 2,
                            "url": "https://paper.seebug.org/3029/",
                            "description": "Sep 11, 2023 — Ignition在构造抽象语法树AST时，JavaScript变量（包括全局属性）的每个引用（即标识符）都由VariableProxy节点表示。 在AST构造之后和变量分配之前，大 ..."
                        },
                        {
                            "rank": 3,
                            "url": "https://docs.jboss.org/hibernate/core/3.3/reference/zh-CN/html_single/",
                            "description": "Jun 24, 2009 — 大多数类有一个JavaBeans风格的属性， 为每一个实例包含唯一的标识。 <id> ... formula (可选): 一个SQL表达式，定义了这个计算（computed） 属性的值。"
                        },
                        {
                            "rank": 4,
                            "url": "https://www.researchgate.net/publication/220967352_Representing_and_Querying_Correlated_Tuples_in_Probabilistic_Databases",
                            "description": "在属性文法的基础上，定义GDM的查询规则，并给出了包括选择、投影、笛卡尔乘积、连接、分组、聚合等的GDM集合代数操作，为批量数据处理奠定了基础。为形式化地描述GDM ..."
                        }
                    ],
                    "knowledgeDensity": 1.8879999178041995,
                    "weight": 0.7333333333333333
                },
                {
                    "id": 1,
                    "pages": [
                        24,
                        26
                    ],
                    "name": "属性文法的计算过程和结果表示",
                    "definition": "描述了属性文法计算的具体过程和最终的表示方法",
                    "information": "详细阐述了计算属性值的步骤，包括计算顺序和对语法分析树的标注（注解），展示了带标注（annotated）的语法分析树用于表示属性值的计算结果。",
                    "usage": "展示了如何将属性文法的计算结果应用于语法树，以便进一步的语义解析或代码生成",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://developer.mozilla.org/zh-CN/docs/Web/CSS/color_value",
                            "description": "Sep 6, 2023 — CSS 数据类型 表示一个颜色。颜色可以包括一个alpha 通道透明度值，来表明颜色如何与背景色混合（composite）。"
                        },
                        {
                            "rank": 1,
                            "url": "https://docs.godotengine.org/zh-cn/4.x/tutorials/export/android_gradle_build.html",
                            "description": "Godot provides the option to build using the gradle buildsystem. Instead of using the already pre-built template that ships with Godot, an Android Java ..."
                        },
                        {
                            "rank": 2,
                            "url": "https://blog.csdn.net/weixin_30275415/article/details/98923388",
                            "description": "May 11, 2010 — 文章浏览阅读196次。在VB.net中，我们有属性这一概念，通常的表达格式是： 1 Private _myProperty As String 2 Property myProperty() As String 3 ..."
                        },
                        {
                            "rank": 3,
                            "url": "https://rfc2cn.com/rfc7906.html",
                            "description": "本文件定义了国家安全局（NSA）使用的关键管理属性。这些属性可以出现在非对称和/或对称密钥包以及随后封装密钥包的加密消息语法（CMS）内容类型中。RFCs 5958和6031中描述 ..."
                        },
                        {
                            "rank": 4,
                            "url": "https://techdocs.broadcom.com/cn/zh-cn/ca-enterprise-software/business-management/ca-service-management/17-2/535746930/535746993/535746995.html",
                            "description": "Nov 25, 2019 — 本页列出了用于定义CA SDM 的对象和属性。系统使用这些对象和属性生成通知文本、记分板查询和数据分区约束。每个对象附带的FACTORY 可选语句可以定义 ..."
                        }
                    ],
                    "knowledgeDensity": 1.32270855993179,
                    "weight": 0.48717948717948717
                },
                {
                    "id": 2,
                    "pages": [
                        26,
                        28
                    ],
                    "name": "属性文法的分类及其应用",
                    "definition": "介绍了属性文法的两个主要分类和它们的应用方式",
                    "information": "S-属性文法仅包含综合属性，L-属性文法可以包含综合属性也可以包含继承属性，产生式右端某文法符号的继承属性的计算只取决于该符号左边文法符号的属性。S-属性文法是L-属性文法的一个特例。",
                    "usage": "用于区分不同类型的属性文法，并指导如何根据文法类型选择合适的语义计算方法",
                    "images": [],
                    "searchresults": [
                        {
                            "rank": 0,
                            "url": "https://rfc2cn.com/rfc7906.html",
                            "description": "本文文件定义了国家安全局（NSA）使用的关键管理属性。这些属性可以出现在非对称和/或对称密钥包以及随后封装密钥包的加密消息语法（CMS）内容类型中。RFCs 5958和6031中描述..."
                        },
                        {
                            "rank": 1,
                            "url": "https://czyt.tech/post/golang-expr-uncompleted-reference/",
                            "description": "如果函数或方法返回非nil的error，那么这个错误将返回给其对应的调用者。 ... 语法访问结构上的公共属性。 如果将数组传递给表达式，请使用 [] 语法..."
                        },
                        {
                            "rank": 2,
                            "url": "https://rfc2cn.com/rfc4914.html",
                            "description": "ASN.1的语法允许应用编码指令[X.680-1]，通过类型前缀和编码控制部分修改指定编码..."
                        },
                        {
                            "rank": 3,
                            "url": "https://stackoverflow.com/questions/",
                            "description": "I'm currently working on developing a robust job submission and monitoring system within a Kubernetes cluster, where users interact with a client that..."
                        },
                        {
                            "rank": 4,
                            "url": "https://segmentfault.com/a/1190000023908144",
                            "description": "表示React 中Element 概念的类型- 表示一个原生DOM 组件（比如 <div /> ）或 ... 生成结果是绝对类型安全的action-creators 及其actions。 /* eslint..."
                        }
                    ],
                    "knowledgeDensity": 1.3141164511550834,
                    "weight": 0.4615384615384615
                },
                {
                    "id": 3,
                    "pages": [
                        28,
                        29
                    ],
                    "name": "S-属性文法的语义计算方法",
                    "definition": "讨论了S-属性文法的语义计算方法",
                    "information": "通常采用自下而上的方式进行计算，若采用LR分析技术，可以通过扩展分析堆栈中的域，形成语义堆栈来存放综合属性的值，计算对应产生式左部文法符号的综合属性值正好发生在每一步归约之前的时刻。",
                    "usage": "指导如何在LR语法分析中实现S-属性文法的语义计算",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.2820012341209677,
                    "weight": 0.358974358974359
                },
                {
                    "id": 4,
                    "pages": [
                        29,
                        30
                    ],
                    "name": "LR分析技术中S-属性文法的实现",
                    "definition": "解释了在LR分析技术中实现S-属性文法的方式",
                    "information": "在LR分析技术中实现S-属性文法时，会利用扩展分析堆栈中的域来形成语义堆栈，用于存放综合属性的值。",
                    "usage": "提供了LR分析中实现S-属性文法计算的具体实例和步骤",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.2812981335240696,
                    "weight": 0.34615384615384615
                }
            ],
            "knowledgeDensity": 24.357033908447356
        },
        {
            "id": 4,
            "name": "综合属性和继承属性的定义及属性文法的例子",
            "pages": [
                31,
                40
            ],
            "subpoints": [
                {
                    "id": 0,
                    "pages": [
                        31,
                        31
                    ],
                    "name": "基于属性文法的语义计算概念介绍",
                    "definition": "基于属性文法的语义计算利用LR分析技术进行S-属性文法的语义计算。",
                    "information": "在LR分析过程中，利用语义栈的综合属性进行计算，通过对应于产生式的语义规则，计算非终结符的属性值。例如，产生式 A→XYZ 的语义规则为 A.a := f(X.x, Y.y, Z.z)，在归约之前，Z.z, Y.y, X.x 分别存放于语义栈的 top，top-1 和 top-2 的相应域中，归约后，这些值被弹出，并存放 A.a 至栈顶。",
                    "usage": "该技术适用于编译器中语义分析阶段，通过属性的计算，实现对源程序语义信息的提取和处理。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.250343222933258,
                    "weight": 0.21666666666666665
                },
                {
                    "id": 1,
                    "pages": [
                        32,
                        33
                    ],
                    "name": "属性文法的语义计算实例",
                    "definition": "通过LR分析技术和S-属性文法的具体实例进行语义计算。",
                    "information": "举例说明了如何用LR分析技术和S-属性文法对常量表达式求值，涉及表达式的产生式和对应的语义动作，如 E→E1 + T 的语义动作为 { E.val := E1.val + T.val }，并展示了这一过程中的分析表和处理过程。",
                    "usage": "此实例演示了在编译过程中如何计算表达式的值，体现了语义计算在编译器设计中表达式求值方面的应用。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 2.321500743606866,
                    "weight": 0.8666666666666667
                },
                {
                    "id": 2,
                    "pages": [
                        34,
                        35
                    ],
                    "name": "L-属性文法的语义计算与深度优先后序遍历算法",
                    "definition": "L-属性文法的语义计算通过自上而下的方式进行，采用基于深度优先后序遍历的算法。",
                    "information": "介绍了L-属性文法的语义计算方法和对应的深度优先后序遍历算法，通过递归过程对树的每一个节点的子节点进行遍历，计算其继承属性值，然后计算该节点的综合属性值。",
                    "usage": "该算法与自上而下预测分析过程相对应，适用于基于LL(1)文法的L-属性文法进行语义计算，主要用于编译器中的语法分析和语义分析阶段。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.306067864597083,
                    "weight": 0.3846153846153846
                },
                {
                    "id": 3,
                    "pages": [
                        36,
                        37
                    ],
                    "name": "基于深度优先后序遍历算法的L-属性文法计算示例",
                    "definition": "通过深度优先后序遍历算法，对L-属性文法进行语义计算的具体示例。",
                    "information": "以二进制小数转换为十进制小数的L-属性文法为例，展示了输入串为 .101 时的计算过程，包括语义动作的执行和属性值的计算。",
                    "usage": "此示例展示了如何将二进制小数转换为十进制小数，并计算其值，说明了深度优先后序遍历算法在实际应用中如何进行语义计算。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.306067864597083,
                    "weight": 0.3974358974358974
                },
                {
                    "id": 4,
                    "pages": [
                        38,
                        40
                    ],
                    "name": "翻译模式及其在语义计算中的应用",
                    "definition": "翻译模式是一种结合了语法制导定义与语义动作的语法描述方式，用于实现语义计算。",
                    "information": "介绍了翻译模式的概念，它将语义动作嵌入到产生式中，以明确语义动作执行的具体位置和时机。讨论了受限的翻译模式，包括S-属性和L-属性文法的翻译模式设计原则，并给出了将二进制小数转换为十进制小数的翻译模式示例。",
                    "usage": "翻译模式广泛用于编译器设计中的语义分析阶段，通过嵌入的语义动作来进行属性的计算和中间代码的生成。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.327189930526419,
                    "weight": 0.5
                }
            ],
            "knowledgeDensity": 31.868203534708062
        },
        {
            "id": 5,
            "name": "基于属性文法的语义计算方法",
            "pages": [
                41,
                50
            ],
            "subpoints": [
                {
                    "id": 0,
                    "pages": [
                        41,
                        43
                    ],
                    "name": "基于翻译模式的语义计算概述",
                    "definition": "介绍了基于翻译模式的语义计算的基本概念",
                    "information": "主要包括基于翻译模式的语义计算的定义，考虑单遍方法、自上而下和自下而上的语义计算方法，以及借助于自上而下的预测分析技术和借助于自下而上的移进-归约分析技术。",
                    "usage": "用于理解语义计算在编译原理中的应用，特别是在语法分析阶段如何结合翻译模式进行语义的计算。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.3613830333086743,
                    "weight": 0.5769230769230769
                },
                {
                    "id": 1,
                    "pages": [
                        44,
                        47
                    ],
                    "name": "基于翻译模式的语义计算举例",
                    "definition": "通过具体例子说明基于翻译模式的语义计算过程",
                    "information": "通过具体的翻译模式，展示了如何构造语义计算的函数，如何处理终结符和非终结符，并给出了具体的语义规则和相应的动作。",
                    "usage": "帮助学生通过具体的例子理解基于翻译模式的语义计算在实际中如何应用，以及如何通过翻译模式指导编译器生成目标代码。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.3878969085856236,
                    "weight": 0.6153846153846154
                },
                {
                    "id": 2,
                    "pages": [
                        48,
                        50
                    ],
                    "name": "消除左递归的翻译模式变换方法",
                    "definition": "介绍了消除左递归以便适应LL(1)文法要求的翻译模式变换方法",
                    "information": "详细介绍了在翻译模式中如何消除左递归，包括变换前后的翻译模式对比、消除左递归的详细步骤，以及变换后的模式如何进行语义计算。",
                    "usage": "帮助学生理解在构造LL(1)文法的语法分析器时，如何处理并消除文法中的左递归问题，从而使得文法适用于自上而下的分析方法。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.3124230545489999,
                    "weight": 0.4487179487179487
                }
            ],
            "knowledgeDensity": 35.92990653115136
        },
        {
            "id": 6,
            "name": "基于翻译模式的语义计算",
            "pages": [
                51,
                60
            ],
            "subpoints": [
                {
                    "id": 0,
                    "pages": [
                        51,
                        51
                    ],
                    "name": "基于翻译模式的语义计算简介",
                    "definition": "介绍基于翻译模式的语义计算的基本概念和构成。",
                    "information": "包括了基于翻译模式的语义计算的各个组成部分，例如E、T、R、P、F等的定义，以及它们之间转换的具体方式。",
                    "usage": "用于指导如何通过翻译模式来进行语义计算，以及如何打印和赋值等操作。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.2546238036659747,
                    "weight": 0.25555555555555554
                },
                {
                    "id": 1,
                    "pages": [
                        52,
                        56
                    ],
                    "name": "自下而上的语义计算与分析栈",
                    "definition": "描述了自下而上的语义计算过程以及在这一过程中分析栈的作用。",
                    "information": "讨论了基于翻译模式的自下而上语义计算，扩展了关于S-属性文法的自下而上计算技术，以及在分析栈中增加存放属性值的域。",
                    "usage": "在编译过程中，如何利用分析栈来实现属性值的计算和传递，以及如何处理综合属性和继承属性。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.9011557724663415,
                    "weight": 0.8
                },
                {
                    "id": 2,
                    "pages": [
                        57,
                        58
                    ],
                    "name": "继承属性的模拟求值",
                    "definition": "介绍了在分析栈中对继承属性进行模拟求值的方法。",
                    "information": "详细讲述了在分析栈中如何访问和计算继承属性，包括通过已有语法符号的综合属性值间接进行的访问方式，以及通过增加新的语法符号和复写规则来实现继承属性值的传递。",
                    "usage": "解决了继承属性在自下而上的语义计算中求值的问题，确保继承属性总能通过某个语法符号的综合属性体现出来。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.306067864597083,
                    "weight": 0.41025641025641024
                },
                {
                    "id": 3,
                    "pages": [
                        59,
                        60
                    ],
                    "name": "复杂例子的继承属性模拟求值",
                    "definition": "通过复杂的实例来演示如何应用继承属性的模拟求值。",
                    "information": "通过更加复杂的例子来展示继承属性模拟求值的过程，其中包括了如何处理属性值的计算和传递，以及如何在不同的翻译模式下进行求值。",
                    "usage": "在编译器设计中，对于复杂的语法和语义规则，如何有效地处理和计算继承属性。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.306067864597083,
                    "weight": 0.4230769230769231
                }
            ],
            "knowledgeDensity": 41.697821836477836
        },
        {
            "id": 7,
            "name": "基于翻译模式的自上而下语义计算",
            "pages": [
                61,
                70
            ],
            "subpoints": [
                {
                    "id": 0,
                    "pages": [
                        61,
                        62
                    ],
                    "name": "翻译模式的语义计算初步介绍",
                    "definition": "介绍了基于翻译模式的自上而下语义计算的基本概念。",
                    "information": "本部分内容包括了对自上而下的语义计算的描述，以及分析栈中继承属性的访问和处理的复杂例子。",
                    "usage": "用于初步理解翻译模式的语义计算方法，并了解其在分析栈中如何处理继承属性。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.306067864597083,
                    "weight": 0.4358974358974359
                },
                {
                    "id": 1,
                    "pages": [
                        63,
                        64
                    ],
                    "name": "翻译模式的语义计算实例应用",
                    "definition": "通过一个例子展示了翻译模式的语义计算在实际中的应用。",
                    "information": "本部分通过处理输入字符串'.101'为例，展示了产生式、语义计算的代码片断以及分析栈的值和属性。",
                    "usage": "通过实例学习如何将翻译模式的语义计算应用到具体的语言分析中。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.2971700822280992,
                    "weight": 0.3717948717948718
                },
                {
                    "id": 2,
                    "pages": [
                        65,
                        66
                    ],
                    "name": "分析栈与综合属性的具体操作",
                    "definition": "详细说明了如何在分析栈中操作和更新综合属性。",
                    "information": "本部分内容详细描述了在分析栈中，如何通过各个语法成分的属性计算和更新综合属性的具体过程。",
                    "usage": "帮助理解在语义分析阶段，分析栈如何被用于存放文法符号的综合属性，并学习如何计算这些属性。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.3353096308315489,
                    "weight": 0.5512820512820513
                },
                {
                    "id": 3,
                    "pages": [
                        67,
                        70
                    ],
                    "name": "翻译模式的语义计算深入探讨",
                    "definition": "进一步深入探讨了基于翻译模式的自上而下语义计算。",
                    "information": "本部分进一步深入讨论了翻译模式的语义计算，包括更多的产生式和语义规则，以及分析栈的深入使用。",
                    "usage": "用于加深对翻译模式自上而下语义计算的理解，为学习更高级的编译技术打下基础。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.8853713308900397,
                    "weight": 0.6538461538461537
                }
            ],
            "knowledgeDensity": 47.5217407450246
        },
        {
            "id": 8,
            "name": "基于翻译模式的自下而上语义计算和继承属性的模拟求值",
            "pages": [
                71,
                74
            ],
            "subpoints": [
                {
                    "id": 0,
                    "pages": [
                        71,
                        71
                    ],
                    "name": "基于翻译模式的语义计算概述",
                    "definition": "介绍了基于翻译模式的自下而上语义计算的基本概念。",
                    "information": "本部分包含了基于翻译模式进行语义计算的整体框架和概念，解释了如何通过翻译模式来计算程序的语义。",
                    "usage": "作为引入部分，为读者提供了对基于翻译模式语义计算方法的初步了解。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.250185479303326,
                    "weight": 0.1388888888888889
                },
                {
                    "id": 1,
                    "pages": [
                        71,
                        71
                    ],
                    "name": "继承属性的分析栈访问",
                    "definition": "详细说明了在分析栈中如何访问和计算继承属性。",
                    "information": "本部分通过复杂的例子展示了在分析栈中对继承属性如何进行访问和求值，涉及到分析栈中的属性继承规则和计算顺序。",
                    "usage": "帮助读者理解在语义分析中如何处理和计算继承属性，特别是在复杂情况下的处理方法。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.250185479303326,
                    "weight": 0.17777777777777776
                },
                {
                    "id": 2,
                    "pages": [
                        71,
                        74
                    ],
                    "name": "示例与分析栈属性综合",
                    "definition": "通过具体的输入串处理例子来展示分析栈属性的综合过程。",
                    "information": "本部分通过处理输入串'.101'的例子，展示了如何在分析栈中进行语义计算，包括各种语义规则和动作的具体实现，以及分析栈的变化。",
                    "usage": "通过具体例子使读者对基于翻译模式的语义计算有更深刻的理解和实践认识，理解如何在分析栈中进行语义属性的计算。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 2.345130785089414,
                    "weight": 0.9333333333333333
                }
            ],
            "knowledgeDensity": 52.36724248872067
        },
        {
            "id": 9,
            "name": "使用综合属性代替继承属性的方法和课后作业",
            "pages": [
                75,
                80
            ],
            "subpoints": [
                {
                    "id": 0,
                    "pages": [
                        75,
                        77
                    ],
                    "name": "基于翻译模式的语义计算",
                    "definition": "基于翻译模式的语义计算是指在编译器设计中，将源代码翻译成目标代码时所涉及的语义信息的计算方法。",
                    "information": "内容涉及自下而上语义计算、分析栈中继承属性的访问以及更复杂的例子。例子中通过产生式规则、语义计算的代码片断来展示如何处理输入串 '.101'，并且说明了分析栈（val）存放语法符号的综合属性，top为栈顶指针。",
                    "usage": "用于编译过程中语法分析阶段，通过计算属性值来构建语法树和中间代码，进而生成目标代码。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.3208559270704543,
                    "weight": 0.47435897435897434
                },
                {
                    "id": 1,
                    "pages": [
                        78,
                        79
                    ],
                    "name": "用综合属性代替继承属性",
                    "definition": "用综合属性代替继承属性是编译器设计中一种优化技术，通过调整文法或计算方式，减少或消除继承属性的使用。",
                    "information": "讨论了使用综合属性替换继承属性的可能性，并通过修改Pascal声明语句的文法示例来说明如何避免使用继承属性。文法修改后，类型可以通过综合属性L.type进行传递，每个变量标识符在生成时，其类型可以填入符号表中。",
                    "usage": "用于简化编译器中的属性计算，使得编译器构造更高效，同时也有助于改善语法的设计，使其更加清晰。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.328445737413446,
                    "weight": 0.5128205128205128
                },
                {
                    "id": 2,
                    "pages": [
                        80,
                        80
                    ],
                    "name": "课后作业",
                    "definition": "课后作业是指老师布置给学生的，在课后完成的用于巩固课堂知识点的任务。",
                    "information": "公告了“第三次书面作业”的相关内容，具体细节需要参照网络学堂的公告。",
                    "usage": "用于帮助学生复习和实践课堂上学到的知识，加深对基于翻译模式的语义计算等概念的理解和应用。",
                    "images": [],
                    "searchresults": [],
                    "knowledgeDensity": 1.2783505443955137,
                    "weight": 0.3333333333333333
                }
            ],
            "knowledgeDensity": 56.294894697600085
        }
    ],
    "knowledgeDensity": 319.7696806358148
}